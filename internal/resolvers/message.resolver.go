package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/gabrielmeloc22/go-message-api/internal/generated"
	"github.com/gabrielmeloc22/go-message-api/internal/model"
)

// From is the resolver for the from field.
func (r *messageResolver) From(ctx context.Context, obj *model.Message) (*model.User, error) {
	panic(fmt.Errorf("not implemented: From - from"))
}

// Chat is the resolver for the chat field.
func (r *messageResolver) Chat(ctx context.Context, obj *model.Message) (*model.Chat, error) {
	panic(fmt.Errorf("not implemented: Chat - chat"))
}

// NewMessage is the resolver for the newMessage field.
func (r *mutationResolver) NewMessage(ctx context.Context, input model.NewMessageInput) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: NewMessage - newMessage"))
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context, chatID int) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// Message returns generated.MessageResolver implementation.
func (r *Resolver) Message() generated.MessageResolver { return &messageResolver{r} }

type messageResolver struct{ *Resolver }
